{"version":3,"sources":["layouts/TabletMenu/TabletMenu.styles.ts","../node_modules/popmotion/dist/es/utils/wrap.js","layouts/TabletMenu/useDimensions.ts","layouts/TabletMenu/MenToggle.tsx","layouts/TabletMenu/index.tsx","../node_modules/framer-motion/dist/es/utils/use-cycle.js"],"names":["window","float","revFloat","TabletNavbar","styled","motion","nav","isOpen","TabletNavbarBg","div","theme","background","card","backgroundColor","TabletNavbarButton","button","TabletMenuItemsWrapper","ul","TabletMenuItem","li","TabletMenuLink","text","TabletMenuText","span","MenuCellsContainer","MenuCellWrapper","border","LangCellWrapper","wrap","min","max","v","rangeSize","MenuToggle","toggle","useTheme","Path","props","path","fill","strokeWidth","stroke","strokeLinecap","onClick","width","height","viewBox","variants","closed","d","open","opacity","transition","duration","Navigation","lazy","direction","sidebar","clipPath","type","stiffness","restDelta","delay","damping","TabletMenu","items","_i","arguments","length","index","useRef","_a","__read","useState","current","item","setItem","next","useCycle","toggleOpen","containerRef","ref","dimensions","useEffect","offsetWidth","offsetHeight","useDimensions","initial","animate","custom","fallback","AppLoader"],"mappings":"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","file":"static/js/Tablet_Menu.22f5f6c1.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { motion } from \"framer-motion\";\n\nconst { float, revFloat } = window;\n\ninterface TabletNavbarProps {\n  isOpen: boolean;\n}\n\nexport const TabletNavbar = styled(motion.nav)<TabletNavbarProps>`\n  position: fixed;\n  top: 0;\n  ${float}: 0;\n  bottom: 0;\n  width: ${({ isOpen }) => (isOpen ? \"15rem\" : \"0\")};\n  z-index: 2000;\n`;\n\nexport const TabletNavbarBg = styled(motion.div)`\n  position: absolute;\n  top: 0;\n  ${float}: 0;\n  bottom: 0;\n  width: 15rem;\n  background-color: ${({ theme }) => theme.background};\n  box-shadow: 0px 0px 5px 0px ${({ theme }) => theme.card.backgroundColor};\n`;\n\nexport const TabletNavbarButton = styled.button`\n  outline: none;\n  border: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  cursor: pointer;\n  position: absolute;\n  top: 18px;\n  ${float}: 5px;\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  background: transparent;\n`;\n\nexport const TabletMenuItemsWrapper = styled(motion.ul)`\n  margin: 0;\n  padding-top: 1rem;\n  padding-${float}: 2rem;\n  padding-bottom: 1.5rem;\n  padding-${revFloat}: 0;\n\n  position: absolute;\n  top: 4.5rem;\n  width: 100%;\n  height: calc(100% - 5rem);\n`;\n\nexport const TabletMenuItem = styled(motion.li)`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  margin-bottom: 0.8rem;\n`;\n\nexport const TabletMenuLink = styled.div`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  color: ${({ theme }) => theme.text};\n  text-decoration: none;\n  text-transform: capitalize;\n`;\n\nexport const TabletMenuText = styled.span`\n  padding: 0.5rem 0.5rem 0;\n  font-size: 1.2rem;\n`;\n\nexport const MenuCellsContainer = styled(motion.div)`\n  width: 100%;\n  position: absolute;\n  bottom: 0rem;\n  ${float}: 0;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  justify-items: center;\n`;\n\nexport const MenuCellWrapper = styled(motion.div)`\n  width: 70%;\n  aspect-ratio: 1;\n  border-radius: 2rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 0.5rem;\n  flex-direction: column;\n  cursor: pointer;\n  color: ${({ theme }) => theme.border};\n\n  @supports (backdrop-filter: blur(10px)) {\n    backdrop-filter: blur(20px);\n  }\n\n  .dark-mode {\n    transform: rotateZ(45deg) !important;\n  }\n`;\n\nexport const LangCellWrapper = styled.div`\n  width: 83%;\n  height: 83%;\n  border-radius: 1rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1rem;\n  font-weight: bold;\n`;\n","var wrap = function (min, max, v) {\n    var rangeSize = max - min;\n    return ((((v - min) % rangeSize) + rangeSize) % rangeSize) + min;\n};\n\nexport { wrap };\n","import { useEffect, useRef } from \"react\";\n\n// Naive implementation - in reality would want to attach\n// a window or resize listener. Also use state/layoutEffect instead of ref/effect\n// if this is important to know on initial client render.\n// It would be safer to  return null for unmeasured states.\nexport const useDimensions = (ref: any) => {\n  const dimensions = useRef({ width: 0, height: 0 });\n\n  useEffect(() => {\n    dimensions.current.width = ref.current.offsetWidth;\n    dimensions.current.height = ref.current.offsetHeight;\n  }, []);\n\n  return dimensions.current;\n};\n","import { motion } from \"framer-motion\";\nimport { useTheme } from \"styled-components\";\nimport * as Styled from \"./TabletMenu.styles\";\n\ninterface MenuToggleProps {\n  toggle: () => void;\n}\n\nconst MenuToggle: React.FC<MenuToggleProps> = ({ toggle }) => {\n  const { text } = useTheme();\n\n  const Path = (props: any) => (\n    <motion.path\n      fill=\"transparent\"\n      strokeWidth=\"3\"\n      stroke={text}\n      strokeLinecap=\"round\"\n      {...props}\n    />\n  );\n\n  return (\n    <Styled.TabletNavbarButton onClick={toggle}>\n      <svg width=\"23\" height=\"23\" viewBox=\"0 0 23 23\">\n        <Path\n          variants={{\n            closed: { d: \"M 2 2.5 L 20 2.5\" },\n            open: { d: \"M 3 16.5 L 17 2.5\" },\n          }}\n        />\n        <Path\n          d=\"M 2 9.423 L 20 9.423\"\n          variants={{\n            closed: { opacity: 1 },\n            open: { opacity: 0 },\n          }}\n          transition={{ duration: 0.1 }}\n        />\n        <Path\n          variants={{\n            closed: { d: \"M 2 16.346 L 20 16.346\" },\n            open: { d: \"M 3 2.5 L 17 16.346\" },\n          }}\n        />\n      </svg>\n    </Styled.TabletNavbarButton>\n  );\n};\n\nexport default MenuToggle;\n","import { useRef, lazy, Suspense } from \"react\";\nimport { useCycle } from \"framer-motion\";\nimport { useDimensions } from \"./useDimensions\";\nimport MenuToggle from \"./MenToggle\";\nimport * as Styled from \"./TabletMenu.styles\";\nimport AppLoader from \"components/AppLoader\";\n\nconst Navigation = lazy(\n  () => import(/*webpackChunkName: \"Tablet_Navigation\"*/ \"./Navigation\")\n);\n\nconst { direction } = window;\n\nconst sidebar = {\n  open: (height = 1000) => ({\n    clipPath: `circle(${height * 2 + 200}px at 40px 40px)`,\n    transition: {\n      type: \"spring\",\n      stiffness: 20,\n      restDelta: 2,\n    },\n  }),\n  closed: {\n    clipPath: `circle(20px at ${direction === \"ltr\" ? \"30px\" : \"270px\"} 40px)`,\n    transition: {\n      type: \"spring\",\n      delay: 0.2,\n      stiffness: 400,\n      damping: 40,\n    },\n  },\n};\n\ninterface TabletMenuProps {}\n\nconst TabletMenu: React.FC<TabletMenuProps> = () => {\n  const [isOpen, toggleOpen] = useCycle(false, true);\n  const containerRef = useRef(null);\n  const { height } = useDimensions(containerRef);\n\n  return (\n    <Styled.TabletNavbar\n      initial={false}\n      animate={isOpen ? \"open\" : \"closed\"}\n      custom={height}\n      ref={containerRef}\n      isOpen={isOpen}\n    >\n      <Styled.TabletNavbarBg variants={sidebar} />\n      <Suspense fallback={<AppLoader />}>{isOpen && <Navigation />}</Suspense>\n      <MenuToggle toggle={() => toggleOpen()} />\n    </Styled.TabletNavbar>\n  );\n};\n\nexport default TabletMenu;\n","import { __read } from 'tslib';\nimport { useRef, useState } from 'react';\nimport { wrap } from 'popmotion';\n\n/**\n * Cycles through a series of visual properties. Can be used to toggle between or cycle through animations. It works similar to `useState` in React. It is provided an initial array of possible states, and returns an array of two arguments.\n *\n * @library\n *\n * ```jsx\n * import * as React from \"react\"\n * import { Frame, useCycle } from \"framer\"\n *\n * export function MyComponent() {\n *   const [x, cycleX] = useCycle(0, 50, 100)\n *\n *   return (\n *     <Frame\n *       animate={{ x: x }}\n *       onTap={() => cycleX()}\n *      />\n *    )\n * }\n * ```\n *\n * @motion\n *\n * An index value can be passed to the returned `cycle` function to cycle to a specific index.\n *\n * ```jsx\n * import * as React from \"react\"\n * import { motion, useCycle } from \"framer-motion\"\n *\n * export const MyComponent = () => {\n *   const [x, cycleX] = useCycle(0, 50, 100)\n *\n *   return (\n *     <motion.div\n *       animate={{ x: x }}\n *       onTap={() => cycleX()}\n *      />\n *    )\n * }\n * ```\n *\n * @param items - items to cycle through\n * @returns [currentState, cycleState]\n *\n * @public\n */\nfunction useCycle() {\n    var items = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        items[_i] = arguments[_i];\n    }\n    var index = useRef(0);\n    var _a = __read(useState(items[index.current]), 2), item = _a[0], setItem = _a[1];\n    return [\n        item,\n        function (next) {\n            index.current =\n                typeof next !== \"number\"\n                    ? wrap(0, items.length, index.current + 1)\n                    : next;\n            setItem(items[index.current]);\n        },\n    ];\n}\n\nexport { useCycle };\n"],"sourceRoot":""}