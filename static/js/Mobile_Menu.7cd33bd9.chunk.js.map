{"version":3,"file":"static/js/Mobile_Menu.7cd33bd9.chunk.js","mappings":"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","sources":["hooks/useScrollDirection.ts","components/Icons/MenuIcon.tsx","hooks/usePreventScroll.ts","layouts/MobileMenu/BottomSheet.tsx","components/CustomLink/index.tsx","layouts/MobileMenu/index.tsx"],"sourcesContent":["import { useLayoutEffect, useState } from \"react\";\n\ntype Direction = \"up\" | \"down\";\n\nconst useScrollDirection = () => {\n  const [scrollDir, setScrollDir] = useState<Direction>(\"up\");\n\n  useLayoutEffect(() => {\n    const threshold = 0;\n    let lastScrollY = window.pageYOffset; //! use 'pageYOffset' which is more reliable in cross browsing\n    let ticking = false;\n\n    const updateScrollDir = () => {\n      const scrollY = window.pageYOffset;\n\n      if (Math.abs(scrollY - lastScrollY) < threshold) {\n        ticking = false;\n        return;\n      }\n      setScrollDir(scrollY > lastScrollY ? \"down\" : \"up\");\n      lastScrollY = scrollY > 0 ? scrollY : 0;\n      ticking = false;\n    };\n\n    const onScroll = () => {\n      if (!ticking) {\n        window.requestAnimationFrame(updateScrollDir);\n        ticking = true;\n      }\n    };\n\n    window.addEventListener(\"scroll\", onScroll);\n\n    return () => window.removeEventListener(\"scroll\", onScroll);\n  }, [scrollDir]);\n\n  return scrollDir;\n};\n\nexport default useScrollDirection;\n","import { SiReactrouter } from \"react-icons/si\";\nimport CSS from 'csstype';\n\ninterface MenuIconProps {\n  size?: number;\n  color?: string;\n  onClick?: () => void;\n  style?: CSS.Properties;\n}\n\nconst MenuIcon: React.FC<MenuIconProps> = (props) => {\n  const { size, color, onClick } = props;\n\n  return <SiReactrouter onClick={onClick} size={size} color={color} />;\n};\n\nexport default MenuIcon;\n","import { useLayoutEffect } from \"react\";\n\nconst usePreventScroll = (ref: any, enable: boolean) => {\n  useLayoutEffect(() => {\n    const containerNode = ref?.current;\n    const bodyElement = document.getElementsByTagName(\"body\")[0];\n    const preventScroll = (\n      e: WheelEvent | MouseEvent | UIEvent | TouchEvent\n    ) => {\n      //! First method (part 1)\n      if (ref.current === e.currentTarget) {\n        bodyElement.style.height = \"100vh\";\n        bodyElement.style.overflow = \"hidden\";\n      }\n      //! Second method (It prevents scroll for all elements)\n      //  e.preventDefault();\n    };\n    containerNode.addEventListener(\"mousewheel\", preventScroll); //! Windows\n    containerNode.addEventListener(\"touchmove\", preventScroll, false); //! Mobile\n\n    //! First method (part 2)\n    if (enable) {\n      bodyElement.style.height = \"100vh\";\n      bodyElement.style.overflow = \"hidden\";\n    } else {\n      bodyElement.style.height = \"\";\n      bodyElement.style.overflow = \"\";\n    }\n\n    //! Clean up\n    return () => {\n      containerNode.removeEventListener(\"mousewheel\", preventScroll);\n      containerNode.removeEventListener(\"touchmove\", preventScroll, false);\n    };\n  }, [ref, enable]);\n};\n\nexport default usePreventScroll;\n","import React, { ReactNode, useCallback, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport * as Styled from \"./MobileMenu.styles\";\nimport usePreventScroll from \"hooks/usePreventScroll\";\nimport MenuIcon from \"components/Icons/MenuIcon\";\nimport SunIcon from \"components/Icons/SunIcon\";\nimport MoonIcon from \"components/Icons/MoonIcon\";\nimport ColorPaletteIcon from \"components/Icons/ColorPaletteIcon\";\nimport { useTypedSelector } from \"hooks/useTypedSelector\";\nimport useActions from \"hooks/useActions\";\nimport Modal from \"components/Modal\";\nimport useModal from \"hooks/useModal\";\nimport SelectLanguage from \"./SelectLanguage\";\nimport SelectPalette from \"./SelectPalette\";\nimport useLanguages from \"hooks/useLanguages\";\n// import GithubRepository from \"./Repository\";\n// import AppLoader from \"components/AppLoader\";\n// import Slider from \"components/Slider\";\n// import GithubRepos from \"views/Home/items/github-repos\";\n\ntype ModalType = \"language\" | \"palette\" | null;\n\nconst sheet = {\n  open: {\n    y: 50,\n    transition: { duration: 0.1 },\n  },\n  closed: {\n    y: 250,\n    transition: { duration: 0.1 },\n  },\n};\n\nconst BottomSheet: React.FC = () => {\n  const { isMobileMenuOpen, themeMode } = useTypedSelector(\n    (state) => state.global\n  );\n  const { toggleMobileMenu, toggleThemeMode } = useActions();\n  const ref = useRef<HTMLDivElement>(null);\n  // const { isLoading, repositories } = useTypedSelector((state) => state.github);\n  const { t, i18n } = useTranslation();\n  const { isShown, toggle } = useModal();\n  const [modalType, setModalType] = useState<ModalType>(null);\n\n  usePreventScroll(ref, isMobileMenuOpen);\n  const { flag } = useLanguages(i18n.language);\n\n  const handleCloseMobileMenu = () => {\n    toggleMobileMenu(false);\n  };\n\n  const handleToggle = () => {\n    toggleThemeMode(themeMode === \"dark\" ? \"light\" : \"dark\");\n  };\n\n  const handleSelect = useCallback((type: ModalType) => {\n    return () => {\n      toggle();\n      setModalType(type);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getModalContent = (type: ModalType) => {\n    switch (type) {\n      case \"language\":\n        return <SelectLanguage toggle={toggle} />;\n      case \"palette\":\n        return <SelectPalette toggle={toggle} />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Styled.ExpandedMenuContainer\n      ref={ref}\n      initial={false}\n      variants={sheet}\n      animate={isMobileMenuOpen ? \"open\" : \"closed\"}\n    >\n      <MenuIcon size={35} onClick={handleCloseMobileMenu} />\n      <Modal\n        isShown={isShown}\n        hide={toggle}\n        headerText={\n          modalType === \"language\" ? t(\"select-lang\") : t(\"select-theme\")\n        }\n        modalContent={getModalContent(modalType)}\n      />\n      <Styled.MenuCellsContainer>\n        <Styled.MenuCellWrapper onClick={handleToggle}>\n          {themeMode === \"dark\" ? (\n            <SunIcon size={50} color=\"#F8C004\" />\n          ) : (\n            <MoonIcon className=\"dark-mode\" size={50} color=\"#333\" />\n          )}\n        </Styled.MenuCellWrapper>\n        <Styled.MenuCellWrapper>\n          <Styled.LangCellWrapper onClick={handleSelect(\"language\")}>\n            {flag as ReactNode}\n          </Styled.LangCellWrapper>\n        </Styled.MenuCellWrapper>\n        <Styled.MenuCellWrapper onClick={handleSelect(\"palette\")}>\n          <ColorPaletteIcon size={50} />\n        </Styled.MenuCellWrapper>\n      </Styled.MenuCellsContainer>\n      {/* <GithubRepos showHeader={false} containerStyles={{ width: \"100%\" }} /> */}\n      {/* <Slider height=\"calc(100% - 14rem)\">\n        {isLoading && (\n          <div className=\"slider-loader-container \">\n            <AppLoader />\n          </div>\n        )}\n        {!isLoading &&\n          repositories?.map((repo) => {\n            return <GithubRepository repo={repo} key={repo?.id} />;\n          })}\n      </Slider> */}\n    </Styled.ExpandedMenuContainer>\n  );\n};\n\nexport default BottomSheet;\n","import { Link, useMatch, useResolvedPath } from \"react-router-dom\";\nimport type { LinkProps } from \"react-router-dom\";\nimport { Children, cloneElement, isValidElement, ReactNode } from \"react\";\n\nconst CustomLink = ({ children, to, ...props }: LinkProps) => {\n  let resolved = useResolvedPath(to);\n  let match = useMatch({ path: resolved.pathname, end: true });\n\n  return (\n    <Link to={to} {...props}>\n      {Children.map<ReactNode, ReactNode>(children, (child) => {\n        if (isValidElement(child)) {\n          return cloneElement(child, { match });\n        }\n      })}\n    </Link>\n  );\n};\n\nexport default CustomLink;\n","import { useEffect, useState } from \"react\";\n// import lottie from \"lottie-web\";\nimport * as Styled from \"./MobileMenu.styles\";\nimport useScrollDirection from \"hooks/useScrollDirection\";\nimport MenuIcon from \"components/Icons/MenuIcon\";\nimport BottomSheet from \"./BottomSheet\";\nimport CustomLink from \"components/CustomLink\";\nimport { useTypedSelector } from \"hooks/useTypedSelector\";\nimport useActions from \"hooks/useActions\";\n\nimport HomeLottie from \"components/Lotties/Home\";\nimport LayersLottie from \"components/Lotties/Layers\";\nimport CodeLottie from \"components/Lotties/Code\";\nimport ContactLottie from \"components/Lotties/Contact\";\n\nconst MobileMenu: React.FC = () => {\n  const [isVisible, setIsVisible] = useState(false);\n  const direction = useScrollDirection();\n  const { isMobileMenuOpen } = useTypedSelector((state) => state.global);\n  const { toggleMobileMenu } = useActions();\n\n  const handleMenuClick = () => {\n    !isMobileMenuOpen && toggleMobileMenu(!isMobileMenuOpen);\n  };\n\n  const hasVScrollbar = document.body.scrollHeight > document.body.clientHeight;\n\n  useEffect(() => {\n    if (direction === \"down\") {\n      toggleMobileMenu(false);\n    }\n\n    if (!hasVScrollbar) {\n      setIsVisible(true);\n    }\n\n    if (direction === \"up\") {\n      setIsVisible(true);\n    } else if (direction === \"down\") {\n      setIsVisible(false);\n    }\n  }, [direction, hasVScrollbar, toggleMobileMenu]);\n\n  return (\n    <Styled.MobileMenuContainer isVisible={isVisible}>\n      <Styled.MenuItem\n        // onMouseEnter={() => lottie.play(\"home\")}\n        // onMouseLeave={() => lottie.stop(\"home\")}\n        as={CustomLink}\n        to=\"/\"\n      >\n        <HomeLottie style={{ height: \"2.5rem\" }} />\n      </Styled.MenuItem>\n      <Styled.MenuItem\n        // onMouseEnter={() => lottie.play(\"apps\")}\n        // onMouseLeave={() => lottie.stop(\"apps\")}\n        as={CustomLink}\n        to=\"/apps\"\n      >\n        <LayersLottie style={{ height: \"4.7rem\" }} />\n      </Styled.MenuItem>\n      <Styled.MenuItem onClick={handleMenuClick} isOpen={isMobileMenuOpen}>\n        <BottomSheet />\n        {!isMobileMenuOpen && <MenuIcon onClick={handleMenuClick} size={35} />}\n      </Styled.MenuItem>\n      <Styled.MenuItem\n        // onMouseEnter={() => lottie.play(\"code\")}\n        // onMouseLeave={() => lottie.stop(\"code\")}\n        as={CustomLink}\n        to=\"/code\"\n      >\n        <CodeLottie style={{ height: \"4.7rem\", width: \"4.7rem\" }} />\n      </Styled.MenuItem>\n      <Styled.MenuItem\n        // onMouseEnter={() => lottie.play(\"contact\")}\n        // onMouseLeave={() => lottie.stop(\"contact\")}\n        as={CustomLink}\n        to=\"/contact\"\n      >\n        <ContactLottie style={{ height: \"4rem\" }} />\n      </Styled.MenuItem>\n    </Styled.MobileMenuContainer>\n  );\n};\n\nexport default MobileMenu;\n"],"names":["useState","scrollDir","setScrollDir","useLayoutEffect","lastScrollY","window","pageYOffset","ticking","updateScrollDir","scrollY","Math","abs","onScroll","requestAnimationFrame","addEventListener","removeEventListener","props","size","color","onClick","ref","enable","containerNode","current","bodyElement","document","getElementsByTagName","preventScroll","e","currentTarget","style","height","overflow","sheet","open","y","transition","duration","closed","useTypedSelector","state","global","isMobileMenuOpen","themeMode","useActions","toggleMobileMenu","toggleThemeMode","useRef","useTranslation","t","i18n","useModal","isShown","toggle","modalType","setModalType","usePreventScroll","flag","useLanguages","language","handleSelect","useCallback","type","initial","variants","animate","Modal","hide","headerText","modalContent","SelectLanguage","SelectPalette","getModalContent","SunIcon","MoonIcon","className","ColorPaletteIcon","children","to","resolved","useResolvedPath","match","useMatch","path","pathname","end","Children","child","isValidElement","cloneElement","isVisible","setIsVisible","direction","useScrollDirection","handleMenuClick","hasVScrollbar","body","scrollHeight","clientHeight","useEffect","as","CustomLink","Home","Layers","isOpen","Code","width","Contact"],"sourceRoot":""}