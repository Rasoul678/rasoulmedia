{"version":3,"file":"static/js/608.e2a40c82.chunk.js","mappings":"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","sources":["../../packages/react-router/lib/context.ts","../../packages/react-router/lib/router.ts","../../packages/react-router/lib/hooks.tsx","../../packages/react-router/lib/components.tsx","../../packages/react-router-dom/index.tsx","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/extends.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js"],"sourcesContent":["import * as React from \"react\";\nimport type { History, Location } from \"history\";\nimport { Action as NavigationType } from \"history\";\n\nimport type { RouteMatch } from \"./router\";\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\nexport type Navigator = Pick<History, \"go\" | \"push\" | \"replace\" | \"createHref\">;\n\ninterface NavigationContextObject {\n  basename: string;\n  navigator: Navigator;\n  static: boolean;\n}\n\nexport const NavigationContext = React.createContext<NavigationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  NavigationContext.displayName = \"Navigation\";\n}\n\ninterface LocationContextObject {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nexport const LocationContext = React.createContext<LocationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  LocationContext.displayName = \"Location\";\n}\n\ninterface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n}\n\nexport const RouteContext = React.createContext<RouteContextObject>({\n  outlet: null,\n  matches: [],\n});\n\nif (__DEV__) {\n  RouteContext.displayName = \"Route\";\n}\n","import type { Location, Path, To } from \"history\";\nimport { parsePath } from \"history\";\n\nexport function invariant(cond: any, message: string): asserts cond {\n  if (!cond) throw new Error(message);\n}\n\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\nexport function warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n\ntype ParamParseFailed = { failed: true };\n\ntype ParamParseSegment<Segment extends string> =\n  // Check here if there exists a forward slash in the string.\n  Segment extends `${infer LeftSegment}/${infer RightSegment}`\n    ? // If there is a forward slash, then attempt to parse each side of the\n      // forward slash.\n      ParamParseSegment<LeftSegment> extends infer LeftResult\n      ? ParamParseSegment<RightSegment> extends infer RightResult\n        ? LeftResult extends string\n          ? // If the left side is successfully parsed as a param, then check if\n            // the right side can be successfully parsed as well. If both sides\n            // can be parsed, then the result is a union of the two sides\n            // (read: \"foo\" | \"bar\").\n            RightResult extends string\n            ? LeftResult | RightResult\n            : LeftResult\n          : // If the left side is not successfully parsed as a param, then check\n          // if only the right side can be successfully parse as a param. If it\n          // can, then the result is just right, else it's a failure.\n          RightResult extends string\n          ? RightResult\n          : ParamParseFailed\n        : ParamParseFailed\n      : // If the left side didn't parse into a param, then just check the right\n      // side.\n      ParamParseSegment<RightSegment> extends infer RightResult\n      ? RightResult extends string\n        ? RightResult\n        : ParamParseFailed\n      : ParamParseFailed\n    : // If there's no forward slash, then check if this segment starts with a\n    // colon. If it does, then this is a dynamic segment, so the result is\n    // just the remainder of the string. Otherwise, it's a failure.\n    Segment extends `:${infer Remaining}`\n    ? Remaining\n    : ParamParseFailed;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  ParamParseSegment<Segment> extends string\n    ? ParamParseSegment<Segment>\n    : string;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport interface RouteObject {\n  caseSensitive?: boolean;\n  children?: RouteObject[];\n  element?: React.ReactNode;\n  index?: boolean;\n  path?: string;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/api#generatepath\n */\nexport function generatePath(path: string, params: Params = {}): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/\\/*\\*$/, (_) =>\n      params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\")\n    );\n}\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface RouteMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObject;\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchroutes\n */\nexport function matchRoutes(\n  routes: RouteObject[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): RouteMatch[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObject;\n}\n\ninterface RouteBranch {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta[];\n}\n\nfunction flattenRoutes(\n  routes: RouteObject[],\n  branches: RouteBranch[] = [],\n  parentsMeta: RouteMeta[] = [],\n  parentPath = \"\"\n): RouteBranch[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<ParamKey extends string = string>(\n  branch: RouteBranch,\n  pathname: string\n): RouteMatch<ParamKey>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: RouteMatch[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchpath\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end\n      ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n      : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n        // parent routes to matching only their own words and nothing more, e.g. parent\n        // route \"/home\" should not match \"/home2\".\n        // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n        // but do not consume the character in the matched path so they can match against\n        // nested paths.\n        \"(?:(?=[.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/api#resolvepath\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string\n): Path {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname;\n\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  let from: string;\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original to value had one.\n  if (\n    toPathname &&\n    toPathname !== \"/\" &&\n    toPathname.endsWith(\"/\") &&\n    !path.pathname.endsWith(\"/\")\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  let nextChar = pathname.charAt(basename.length);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(basename.length) || \"/\";\n}\n\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\nconst normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\nconst normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n","import * as React from \"react\";\nimport type { Location, Path, To } from \"history\";\nimport { Action as NavigationType, parsePath } from \"history\";\n\nimport { LocationContext, NavigationContext, RouteContext } from \"./context\";\nimport type {\n  ParamParseKey,\n  Params,\n  PathMatch,\n  PathPattern,\n  RouteMatch,\n  RouteObject,\n} from \"./router\";\nimport {\n  getToPathname,\n  invariant,\n  joinPaths,\n  matchPath,\n  matchRoutes,\n  resolveTo,\n  warning,\n  warningOnce,\n} from \"./router\";\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usehref\n */\nexport function useHref(to: To): string {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to);\n\n  let joinedPathname = pathname;\n  if (basename !== \"/\") {\n    let toPathname = getToPathname(to);\n    let endsWithSlash = toPathname != null && toPathname.endsWith(\"/\");\n    joinedPathname =\n      pathname === \"/\"\n        ? basename + (endsWithSlash ? \"/\" : \"\")\n        : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\n\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useinroutercontext\n */\nexport function useInRouterContext(): boolean {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/docs/en/v6/api#uselocation\n */\nexport function useLocation(): Location {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigationtype\n */\nexport function useNavigationType(): NavigationType {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns true if the URL for the given \"to\" value matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usematch\n */\nexport function useMatch<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(pattern: PathPattern<Path> | Path): PathMatch<ParamKey> | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n\n  let { pathname } = useLocation();\n  return React.useMemo(\n    () => matchPath<ParamKey, Path>(pattern, pathname),\n    [pathname, pattern]\n  );\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\nexport interface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n}\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigate\n */\nexport function useNavigate(): NavigateFunction {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    matches.map((match) => match.pathnameBase)\n  );\n\n  let activeRef = React.useRef(false);\n  React.useEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(\n        activeRef.current,\n        `You should call navigate() in a React.useEffect(), not when ` +\n          `your component is first rendered.`\n      );\n\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname\n      );\n\n      if (basename !== \"/\") {\n        path.pathname = joinPaths([basename, path.pathname]);\n      }\n\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state\n      );\n    },\n    [basename, navigator, routePathnamesJson, locationPathname]\n  );\n\n  return navigate;\n}\n\nconst OutletContext = React.createContext<unknown>(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/docs/en/v6/api#useoutletcontext\n */\nexport function useOutletContext<Context = unknown>(): Context {\n  return React.useContext(OutletContext) as Context;\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useoutlet\n */\nexport function useOutlet(context?: unknown): React.ReactElement | null {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return (\n      <OutletContext.Provider value={context}>{outlet}</OutletContext.Provider>\n    );\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useparams\n */\nexport function useParams<\n  ParamsOrKey extends string | Record<string, string | undefined> = string\n>(): Readonly<\n  [ParamsOrKey] extends [string] ? Params<ParamsOrKey> : Partial<ParamsOrKey>\n> {\n  let { matches } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? (routeMatch.params as any) : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useresolvedpath\n */\nexport function useResolvedPath(to: To): Path {\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    matches.map((match) => match.pathnameBase)\n  );\n\n  return React.useMemo(\n    () => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname),\n    [to, routePathnamesJson, locationPathname]\n  );\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useroutes\n */\nexport function useRoutes(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string\n): React.ReactElement | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n\n  let { matches: parentMatches } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (__DEV__) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = (parentRoute && parentRoute.path) || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at ` +\n        `\"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the ` +\n        `parent route path has no trailing \"*\". This means if you navigate ` +\n        `deeper, the parent won't match anymore and therefore the child ` +\n        `routes will never render.\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route ` +\n        `path=\"${parentPath === \"/\" ? \"*\" : `${parentPath}/*`}\">.`\n    );\n  }\n\n  let locationFromContext = useLocation();\n\n  let location;\n  if (locationArg) {\n    let parsedLocationArg =\n      typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n    invariant(\n      parentPathnameBase === \"/\" ||\n        parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, ` +\n        `the location pathname must begin with the portion of the URL pathname that was ` +\n        `matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" ` +\n        `but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname =\n    parentPathnameBase === \"/\"\n      ? pathname\n      : pathname.slice(parentPathnameBase.length) || \"/\";\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n\n  if (__DEV__) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n\n    warning(\n      matches == null ||\n        matches[matches.length - 1].route.element !== undefined,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" does not have an element. ` +\n        `This means it will render an <Outlet /> with a null value by default resulting in an \"empty\" page.`\n    );\n  }\n\n  return _renderMatches(\n    matches &&\n      matches.map((match) =>\n        Object.assign({}, match, {\n          params: Object.assign({}, parentParams, match.params),\n          pathname: joinPaths([parentPathnameBase, match.pathname]),\n          pathnameBase:\n            match.pathnameBase === \"/\"\n              ? parentPathnameBase\n              : joinPaths([parentPathnameBase, match.pathnameBase]),\n        })\n      ),\n    parentMatches\n  );\n}\n\nexport function _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = []\n): React.ReactElement | null {\n  if (matches == null) return null;\n\n  return matches.reduceRight((outlet, match, index) => {\n    return (\n      <RouteContext.Provider\n        children={\n          match.route.element !== undefined ? match.route.element : outlet\n        }\n        value={{\n          outlet,\n          matches: parentMatches.concat(matches.slice(0, index + 1)),\n        }}\n      />\n    );\n  }, null as React.ReactElement | null);\n}\n","import * as React from \"react\";\nimport type { InitialEntry, Location, MemoryHistory, To } from \"history\";\nimport {\n  Action as NavigationType,\n  createMemoryHistory,\n  parsePath,\n} from \"history\";\n\nimport { LocationContext, NavigationContext, Navigator } from \"./context\";\nimport {\n  useInRouterContext,\n  useNavigate,\n  useOutlet,\n  useRoutes,\n  _renderMatches,\n} from \"./hooks\";\nimport type { RouteMatch, RouteObject } from \"./router\";\nimport { invariant, normalizePathname, stripBasename, warning } from \"./router\";\n\nexport interface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n}\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/docs/en/v6/api#memoryrouter\n */\nexport function MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex,\n}: MemoryRouterProps): React.ReactElement {\n  let historyRef = React.useRef<MemoryHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({ initialEntries, initialIndex });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: any;\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/docs/en/v6/api#navigate\n */\nexport function Navigate({ to, replace, state }: NavigateProps): null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  warning(\n    !React.useContext(NavigationContext).static,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  let navigate = useNavigate();\n  React.useEffect(() => {\n    navigate(to, { replace, state });\n  });\n\n  return null;\n}\n\nexport interface OutletProps {\n  context?: unknown;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/docs/en/v6/api#outlet\n */\nexport function Outlet(props: OutletProps): React.ReactElement | null {\n  return useOutlet(props.context);\n}\n\nexport interface RouteProps {\n  caseSensitive?: boolean;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  index?: boolean;\n  path?: string;\n}\n\nexport interface PathRouteProps {\n  caseSensitive?: boolean;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  index?: false;\n  path: string;\n}\n\nexport interface LayoutRouteProps {\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n}\n\nexport interface IndexRouteProps {\n  element?: React.ReactNode | null;\n  index: true;\n}\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#route\n */\nexport function Route(\n  _props: PathRouteProps | LayoutRouteProps | IndexRouteProps\n): React.ReactElement | null {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, ` +\n      `never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\n\nexport interface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial<Location> | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/docs/en/v6/api#router\n */\nexport function Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = NavigationType.Pop,\n  navigator,\n  static: staticProp = false,\n}: RouterProps): React.ReactElement | null {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You should never have more than one in your app.`\n  );\n\n  let basename = normalizePathname(basenameProp);\n  let navigationContext = React.useMemo(\n    () => ({ basename, navigator, static: staticProp }),\n    [basename, navigator, staticProp]\n  );\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\",\n  } = locationProp;\n\n  let location = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      pathname: trailingPathname,\n      search,\n      hash,\n      state,\n      key,\n    };\n  }, [basename, pathname, search, hash, state, key]);\n\n  warning(\n    location != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL ` +\n      `\"${pathname}${search}${hash}\" because it does not start with the ` +\n      `basename, so the <Router> won't render anything.`\n  );\n\n  if (location == null) {\n    return null;\n  }\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider\n        children={children}\n        value={{ location, navigationType }}\n      />\n    </NavigationContext.Provider>\n  );\n}\n\nexport interface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial<Location> | string;\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#routes\n */\nexport function Routes({\n  children,\n  location,\n}: RoutesProps): React.ReactElement | null {\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/docs/en/v6/api#createroutesfromchildren\n */\nexport function createRoutesFromChildren(\n  children: React.ReactNode\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, (element) => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children)\n      );\n      return;\n    }\n\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    let route: RouteObject = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path,\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nexport function renderMatches(\n  matches: RouteMatch[] | null\n): React.ReactElement | null {\n  return _renderMatches(matches);\n}\n","/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport type { BrowserHistory, HashHistory, History } from \"history\";\nimport { createBrowserHistory, createHashHistory } from \"history\";\nimport {\n  MemoryRouter,\n  Navigate,\n  Outlet,\n  Route,\n  Router,\n  Routes,\n  createRoutesFromChildren,\n  generatePath,\n  matchRoutes,\n  matchPath,\n  createPath,\n  parsePath,\n  resolvePath,\n  renderMatches,\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useMatch,\n  useNavigate,\n  useNavigationType,\n  useOutlet,\n  useParams,\n  useResolvedPath,\n  useRoutes,\n  useOutletContext,\n} from \"react-router\";\nimport type { To } from \"react-router\";\n\nfunction warning(cond: boolean, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// RE-EXPORTS\n////////////////////////////////////////////////////////////////////////////////\n\n// Note: Keep in sync with react-router exports!\nexport {\n  MemoryRouter,\n  Navigate,\n  Outlet,\n  Route,\n  Router,\n  Routes,\n  createRoutesFromChildren,\n  generatePath,\n  matchRoutes,\n  matchPath,\n  createPath,\n  parsePath,\n  renderMatches,\n  resolvePath,\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useMatch,\n  useNavigate,\n  useNavigationType,\n  useOutlet,\n  useParams,\n  useResolvedPath,\n  useRoutes,\n  useOutletContext,\n};\n\nexport { NavigationType } from \"react-router\";\nexport type {\n  Hash,\n  Location,\n  Path,\n  To,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigator,\n  OutletProps,\n  Params,\n  PathMatch,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  PathRouteProps,\n  LayoutRouteProps,\n  IndexRouteProps,\n  RouterProps,\n  Pathname,\n  Search,\n  RoutesProps,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n} from \"react-router\";\n\n////////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n////////////////////////////////////////////////////////////////////////////////\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({ basename, children, window }: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({ basename, children, history }: HistoryRouterProps) {\n  const [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nfunction isModifiedEvent(event: React.MouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  to: To;\n}\n\n/**\n * The public API for rendering a history-aware <a>.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    { onClick, reloadDocument, replace = false, state, target, to, ...rest },\n    ref\n  ) {\n    let href = useHref(to);\n    let internalOnClick = useLinkClickHandler(to, { replace, state, target });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented && !reloadDocument) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={href}\n        onClick={handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?:\n    | React.ReactNode\n    | ((props: { isActive: boolean }) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?: string | ((props: { isActive: boolean }) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: { isActive: boolean }) => React.CSSProperties);\n}\n\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let location = useLocation();\n    let path = useResolvedPath(to);\n\n    let locationPathname = location.pathname;\n    let toPathname = path.pathname;\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      toPathname = toPathname.toLowerCase();\n    }\n\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(toPathname.length) === \"/\");\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp({ isActive });\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [classNameProp, isActive ? \"active\" : null]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\" ? styleProp({ isActive }) : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n      >\n        {typeof children === \"function\" ? children({ isActive }) : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// HOOKS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to);\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (\n        event.button === 0 && // Ignore everything but left clicks\n        (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n        !isModifiedEvent(event) // Ignore clicks with modifier keys\n      ) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here.\n        let replace =\n          !!replaceProp || createPath(location) === createPath(path);\n\n        navigate(to, { replace, state });\n      }\n    },\n    [location, navigate, path, replaceProp, state, target, to]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(defaultInit?: URLSearchParamsInit) {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n\n  let location = useLocation();\n  let searchParams = React.useMemo(() => {\n    let searchParams = createSearchParams(location.search);\n\n    for (let key of defaultSearchParamsRef.current.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParamsRef.current.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n\n    return searchParams;\n  }, [location.search]);\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback(\n    (\n      nextInit: URLSearchParamsInit,\n      navigateOptions?: { replace?: boolean; state?: any }\n    ) => {\n      navigate(\"?\" + createSearchParams(nextInit), navigateOptions);\n    },\n    [navigate]\n  );\n\n  return [searchParams, setSearchParams] as const;\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}"],"names":["NavigationContext","React","LocationContext","RouteContext","outlet","matches","invariant","cond","message","Error","generatePath","path","params","replace","_","key","matchRoutes","routes","locationArg","basename","pathname","stripBasename","parsePath","branches","flattenRoutes","sort","a","b","score","siblings","length","slice","every","n","i","compareIndexes","routesMeta","map","meta","childrenIndex","rankRouteBranches","matchRouteBranch","parentsMeta","parentPath","forEach","route","index","relativePath","caseSensitive","startsWith","joinPaths","concat","children","push","computeScore","paramRe","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","assign","pathnameBase","normalizePathname","pattern","paramNames","regexpSource","paramName","endsWith","RegExp","undefined","compilePath","matcher","captureGroups","memo","splatValue","value","decodeURIComponent","error","safelyDecodeURIComponent","resolvePath","to","fromPathname","toPathname","search","hash","pop","join","resolvePathname","normalizeSearch","normalizeHash","resolveTo","toArg","routePathnames","locationPathname","from","routePathnameIndex","toSegments","shift","toLowerCase","nextChar","charAt","paths","useHref","useInRouterContext","navigator","useResolvedPath","joinedPathname","getToPathname","endsWithSlash","createHref","useLocation","location","useNavigationType","navigationType","useMatch","useNavigate","routePathnamesJson","JSON","stringify","activeRef","current","options","parse","state","go","OutletContext","useOutletContext","useOutlet","context","React.createElement","Provider","useParams","routeMatch","useRoutes","parentMatches","parentParams","parentPathnameBase","locationFromContext","parsedLocationArg","_parsedLocationArg$pa","_renderMatches","reduceRight","element","MemoryRouter","_ref","initialEntries","initialIndex","historyRef","createMemoryHistory","history","action","setState","listen","Router","Navigate","_ref2","navigate","Outlet","props","Route","_props","_ref3","basenameProp","locationProp","NavigationType","static","staticProp","navigationContext","trailingPathname","Routes","_ref4","createRoutesFromChildren","type","apply","renderMatches","BrowserRouter","window","createBrowserHistory","HashRouter","createHashHistory","HistoryRouter","Link","ref","onClick","reloadDocument","target","rest","href","internalOnClick","useLinkClickHandler","createElement","event","defaultPrevented","NavLink","ariaCurrentProp","className","classNameProp","styleProp","style","isActive","ariaCurrent","Boolean","replaceProp","button","metaKey","altKey","ctrlKey","shiftKey","isModifiedEvent","preventDefault","createPath","useSearchParams","defaultInit","defaultSearchParamsRef","createSearchParams","searchParams","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","F","done","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","keys","has","getAll","append","nextInit","navigateOptions","init","URLSearchParams","v","_arrayWithHoles","arr","_extends","bind","arguments","source","prototype","hasOwnProperty","this","_nonIterableRest","_slicedToArray","arrayWithHoles","_i","_s","_arr","_n","_d","nonIterableRest"],"sourceRoot":""}