{"version":3,"sources":["components/Icons/SunIcon.tsx","components/Icons/MoonIcon.tsx","components/Icons/ColorPaletteIcon.tsx","components/Lotties/Home/Home.styles.ts","components/Lotties/Home/index.tsx","components/Lotties/Layers/Layers.styles.ts","components/Lotties/Layers/index.tsx","components/Lotties/Code/Code.styles.ts","components/Lotties/Code/index.tsx","components/Lotties/Contact/Contact.styles.ts","components/Lotties/Contact/index.tsx","layouts/DesktopMenu/DesktopMenu.styles.ts","layouts/DesktopMenu/MenuItem.tsx","components/CustomSelect/CustomSelect.styles.ts","components/CustomSelect/CustomSelect.tsx","layouts/DesktopMenu/PaletteSelect.tsx","layouts/DesktopMenu/index.tsx"],"names":["SunIcon","props","size","color","match","theme","useTheme","border","MoonIcon","className","ColorPaletteIcon","style","Lottie","styled","div","text","HomeLottie","container","useRef","useLottie","animationData","homeJson","name","loop","ref","LayersLottie","layersJson","CodeLottie","codeJson","ContactLottie","contactJson","DesktopNavbar","motion","nav","background","card","backgroundColor","MenuItemsWrapper","section","MenuItem","MenuLink","SettingWrapper","variants","open","y","x","opacity","transition","stiffness","velocity","closed","linkTo","children","whileHover","scale","whileTap","onMouseEnter","lottie","play","onMouseLeave","stop","as","Link","to","SelectContainer","CustomSelect","classNamePrefix","PaletteSelect","components","Control","rest","position","right","DesktopMenu","useTypedSelector","state","global","themeMode","selectedPallet","themePallet","useActions","toggleThemeMode","setThemePalette","t","useTranslation","colorOptions","useMemo","Object","entries","pallets","map","key","value","label","langOptions","handleChangeLanguage","useCallback","lang","i18next","language","window","location","reload","changeLanguage","getStyles","select","menu","styles","width","option","isSelected","cursor","mainColor","singleValue","height","fontSize","Home","Layers","Code","Contact","gap","options","isSearchable","onChange","hideSelectedOptions","onClick"],"mappings":"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","file":"static/js/Desktop_Menu.02d1ca8b.chunk.js","sourcesContent":["import { HiSun } from \"react-icons/hi\";\nimport { PathMatch } from \"react-router\";\nimport { useTheme } from \"styled-components\";\n\ninterface SunIconProps {\n  size?: number;\n  color?: string;\n  match?: PathMatch<string> | null;\n}\n\nconst SunIcon: React.FC<SunIconProps> = (props) => {\n  const { size, color, match } = props;\n  const theme = useTheme();\n\n  return <HiSun size={size} color={!!match ? theme.border : color} />;\n};\n\nexport default SunIcon;\n","import { GiMoonBats } from \"react-icons/gi\";\nimport { PathMatch } from \"react-router\";\nimport { useTheme } from \"styled-components\";\n\ninterface MoonIconProps {\n  size?: number;\n  color?: string;\n  match?: PathMatch<string> | null;\n  className?: string;\n}\n\nconst MoonIcon: React.FC<MoonIconProps> = (props) => {\n  const { size, color, match, className } = props;\n  const theme = useTheme();\n\n  return (\n    <GiMoonBats\n      size={size}\n      color={!!match ? theme.border : color}\n      className={className}\n    />\n  );\n};\n\nexport default MoonIcon;\n","import { IoColorPalette } from \"react-icons/io5\";\nimport { PathMatch } from \"react-router\";\nimport { useTheme } from \"styled-components\";\nimport CSS from \"csstype\";\n\ninterface ColorPaletteIconProps {\n  size?: number;\n  color?: string;\n  match?: PathMatch<string> | null;\n  className?: string;\n  style?: CSS.Properties;\n}\n\nconst ColorPaletteIcon: React.FC<ColorPaletteIconProps> = (props) => {\n  const { size, color, match, className, style } = props;\n  const theme = useTheme();\n\n  return (\n    <IoColorPalette\n      size={size}\n      color={!!match ? theme.border : color}\n      className={className}\n      style={style}\n    />\n  );\n};\n\nexport default ColorPaletteIcon;\n","import styled from \"styled-components\";\n\nexport const Lottie = styled.div`\n  height: 100%;\n  width: 100%;\n\n  svg path {\n    stroke: ${({ theme }) => theme.text};\n  }\n\n  svg g g:nth-child(1) path {\n    stroke: ${({ theme }) => theme.border};\n  }\n\n  svg g g:nth-child(4) path {\n    stroke: ${({ theme }) => theme.border};\n  }\n`;\n","import { HTMLAttributes, useRef } from \"react\";\nimport useLottie from \"hooks/useLottie\";\nimport * as Styled from \"./Home.styles\";\nimport homeJson from \"assets/animations/lordicons/red/63-home-outline-edited (dark).json\";\n\ninterface HomeLottieProps extends HTMLAttributes<HTMLDivElement> {\n  name?: string;\n}\n\nconst HomeLottie: React.FC<HomeLottieProps> = (props) => {\n  const container = useRef<HTMLDivElement | null>(null);\n\n  useLottie({\n    container: container as any,\n    animationData: homeJson,\n    name: props.name || \"home\",\n    loop: false,\n  });\n\n  return <Styled.Lottie ref={container} {...props} />;\n};\n\nexport default HomeLottie;\n","import styled from \"styled-components\";\n\nexport const Lottie = styled.div`\n  height: 100%;\n  width: 100%;\n\n  svg path {\n    stroke: ${({ theme }) => theme.text};\n  }\n\n  svg g g:nth-child(2) path {\n    stroke: ${({ theme }) => theme.border};\n  }\n`;\n","import { HTMLAttributes, useRef } from \"react\";\nimport useLottie from \"hooks/useLottie\";\nimport * as Styled from \"./Layers.styles\";\nimport layersJson from \"assets/animations/lordicons/red/12-layes-outline-edited (dark).json\";\n\ninterface LayersLottieProps extends HTMLAttributes<HTMLDivElement> {\n  name?: string;\n}\n\nconst LayersLottie: React.FC<LayersLottieProps> = (props) => {\n  const container = useRef<HTMLDivElement | null>(null);\n\n  useLottie({\n    container: container as any,\n    animationData: layersJson,\n    name: props.name || \"apps\",\n    loop: false,\n  });\n\n  return <Styled.Lottie ref={container} {...props} />;\n};\n\nexport default LayersLottie;\n","import styled from \"styled-components\";\n\nexport const Lottie = styled.div`\n  height: 100%;\n  width: 100%;\n\n  svg path {\n    stroke: ${({ theme }) => theme.text};\n  }\n\n  svg g g:nth-child(n + 3) path {\n    stroke: ${({ theme }) => theme.border};\n  }\n`;\n","import { HTMLAttributes, useRef } from \"react\";\nimport useLottie from \"hooks/useLottie\";\nimport * as Styled from \"./Code.styles\";\nimport codeJson from \"assets/animations/lordicons/red/742-multimedia-code-1-outline-edited (dark).json\";\n\ninterface CodeLottieProps extends HTMLAttributes<HTMLDivElement> {\n  name?: string;\n}\n\nconst CodeLottie: React.FC<CodeLottieProps> = (props) => {\n  const container = useRef<HTMLDivElement | null>(null);\n\n  useLottie({\n    container: container as any,\n    animationData: codeJson,\n    name: props.name || \"code\",\n    loop: false,\n  });\n\n  return <Styled.Lottie ref={container} {...props} />;\n};\n\nexport default CodeLottie;\n","import styled from \"styled-components\";\n\nexport const Lottie = styled.div`\n  height: 100%;\n  width: 100%;\n\n  svg path {\n    stroke: ${({ theme }) => theme.text};\n  }\n\n  svg g g:nth-child(3) path {\n    stroke: ${({ theme }) => theme.border};\n  }\n\n  svg g g:nth-child(4) path {\n    stroke: ${({ theme }) => theme.border};\n  }\n`;\n","import { HTMLAttributes, useRef } from \"react\";\nimport useLottie from \"hooks/useLottie\";\nimport * as Styled from \"./Contact.styles\";\nimport contactJson from \"assets/animations/lordicons/red/981-consultation-outline-edited (dark).json\";\n\ninterface ContactLottieProps extends HTMLAttributes<HTMLDivElement> {\n  name?: string;\n}\n\nconst ContactLottie: React.FC<ContactLottieProps> = (props) => {\n  const container = useRef<HTMLDivElement | null>(null);\n\n  useLottie({\n    container: container as any,\n    animationData: contactJson,\n    name: props.name || \"contact\",\n    loop: false,\n  });\n\n  return <Styled.Lottie ref={container} {...props} />;\n};\n\nexport default ContactLottie;\n","import { motion } from \"framer-motion\";\nimport styled from \"styled-components\";\n\nexport const DesktopNavbar = styled(motion.nav)`\n  position: sticky;\n  top: 0;\n  padding: 1rem;\n  height: 4rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: ${({ theme }) => theme.background};\n  \n  z-index: 200;\n  -webkit-box-shadow: 0px 1px 1px ${({ theme }) => theme.card.backgroundColor};\n  -moz-box-shadow: 0px 1px 1px ${({ theme }) => theme.card.backgroundColor};\n  box-shadow: 0px 1px 1px ${({ theme }) => theme.card.backgroundColor};\n`;\n\nexport const MenuItemsWrapper = styled(motion.section)`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 1rem;\n`;\n\nexport const MenuItem = styled(motion.div)`\n  margin: 0;\n  padding: 0;\n`;\n\nexport const MenuLink = styled.div`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n`;\n\nexport const SettingWrapper = styled(motion.div)`\n  display: flex;\n  cursor: pointer;\n  // color: ${({ theme }) => theme.border};\n`;\n","import lottie from \"lottie-web\";\nimport { Link } from \"react-router-dom\";\nimport * as Styled from \"./DesktopMenu.styles\";\n\ninterface MenuItemProps {\n  name: string;\n  linkTo: string;\n}\n\nconst variants = {\n  open: {\n    y: 0,\n    x: 0,\n    opacity: 1,\n    transition: {\n      y: { stiffness: 1000, velocity: -100 },\n    },\n  },\n  closed: {\n    y: 0,\n    x: -250,\n    opacity: 0,\n    transition: {\n      y: { stiffness: 1000 },\n    },\n  },\n};\n\nconst MenuItem: React.FC<MenuItemProps> = ({ name, linkTo, children }) => {\n  return (\n    <Styled.MenuItem\n      variants={variants}\n      whileHover={{ scale: 1.1 }}\n      whileTap={{ scale: 0.95 }}\n      onMouseEnter={() => lottie.play(name)}\n      onMouseLeave={() => lottie.stop(name)}\n    >\n      <Styled.MenuLink as={Link} to={linkTo}>\n        {children}\n      </Styled.MenuLink>\n    </Styled.MenuItem>\n  );\n};\n\nexport default MenuItem;\n","import styled from \"styled-components\";\n\nexport const SelectContainer = styled.div`\n  width: 100%;\n\n  .select__menu {\n    background: ${({ theme }) => theme.background};\n    box-shadow: 0px 0px 2px 0px ${({ theme }) => theme.text};\n  }\n\n  .select__control {\n    border: none;\n    background: transparent;\n    box-shadow: none;\n  }\n\n  .select__single-value {\n    color: ${({ theme }) => theme.border};\n    text-transform: capitalize;\n  }\n\n  .select__option {\n    color: ${({ theme }) => theme.text};\n    text-transform: capitalize;\n  }\n\n  .select__indicators {\n    display: none;\n  }\n`;\n","import * as Styled from \"./CustomSelect.styles\";\nimport Select, { GroupBase, Props } from \"react-select\";\n\nfunction CustomSelect<\n  Option,\n  IsMulti extends boolean = false,\n  Group extends GroupBase<Option> = GroupBase<Option>\n>(props: Props<Option, IsMulti, Group>) {\n\n  return (\n    <Styled.SelectContainer>\n      <Select classNamePrefix='select' {...props} />\n    </Styled.SelectContainer>\n  );\n}\n\nexport default CustomSelect;\n","import { components } from \"react-select\";\nimport CustomSelect from \"components/CustomSelect/CustomSelect\";\nimport ColorPaletteIcon from \"components/Icons/ColorPaletteIcon\";\n\nconst PaletteSelect = (props: any) => (\n  <CustomSelect\n    {...props}\n    components={{\n      Control: ({ children, ...rest }) => (\n        <components.Control {...rest}>\n          <ColorPaletteIcon style={{ position: \"absolute\", right: 'calc(50% - 1rem)' }} size={30} />\n          {children}\n        </components.Control>\n      ),\n    }}\n  />\n);\n\nexport default PaletteSelect;\n","import { useCallback, useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport i18next from \"i18next\";\nimport * as Styled from \"./DesktopMenu.styles\";\nimport HomeLottie from \"components/Lotties/Home\";\nimport LayersLottie from \"components/Lotties/Layers\";\nimport CodeLottie from \"components/Lotties/Code\";\nimport ContactLottie from \"components/Lotties/Contact\";\nimport MenuItem from \"./MenuItem\";\nimport SunIcon from \"components/Icons/SunIcon\";\nimport MoonIcon from \"components/Icons/MoonIcon\";\nimport { useTypedSelector } from \"hooks/useTypedSelector\";\nimport useActions from \"hooks/useActions\";\nimport PaletteSelect from \"./PaletteSelect\";\nimport CustomSelect from \"components/CustomSelect/CustomSelect\";\n\ninterface DesktopMenuProps {}\n\nconst DesktopMenu: React.FC<DesktopMenuProps> = () => {\n  const { themeMode, selectedPallet, themePallet } = useTypedSelector(\n    (state) => state.global\n  );\n  const { toggleThemeMode, setThemePalette } = useActions();\n  const { t } = useTranslation();\n\n  const colorOptions = useMemo(() => {\n    return Object.entries(themePallet.pallets).map(([key, value]) => ({\n      label: t(value.name),\n      value: key,\n    }));\n  }, [t]);\n\n  const langOptions = useMemo(() => {\n    return [\n      { label: t(\"lang.en\"), value: \"en\" },\n      { label: t(\"lang.fr\"), value: \"fr\" },\n      { label: t(\"lang.nl\"), value: \"nl\" },\n      { label: t(\"lang.hi\"), value: \"hi\" },\n      { label: t(\"lang.fa\"), value: \"fa\" },\n      { label: t(\"lang.es\"), value: \"es\" },\n    ];\n  }, [t]);\n\n  const handleToggle = () => {\n    toggleThemeMode(themeMode === \"dark\" ? \"light\" : \"dark\");\n  };\n\n  const handleChangeLanguage = useCallback((value: any) => {\n    const lang = value.value;\n    //! Reload for rtl.\n    if (lang === \"fa\" || i18next.language === \"fa\") {\n      window.location.reload();\n    }\n\n    i18next.changeLanguage(lang);\n  }, []);\n\n  const getStyles = (select?: string) => ({\n    menu: (styles: any) => ({\n      ...styles,\n      ...(select === \"lang\" ? { width: \"7rem\" } : { width: \"auto\" }),\n    }),\n    option: (styles: any, { isSelected }: { isSelected: boolean }) => ({\n      ...styles,\n      backgroundColor: \"transparent\",\n      cursor: \"pointer\",\n      color: isSelected\n        ? themePallet.pallets[selectedPallet].mainColor + \"!important\"\n        : \"\",\n    }),\n    singleValue: (styles: any) => ({\n      ...styles,\n      cursor: \"pointer\",\n      ...(select === \"lang\" ? { width: \"6rem\" } : { width: \"3rem\" }),\n      height: \"1.8rem\",\n      color: themePallet.pallets[selectedPallet].text + \"!important\",\n      fontSize: \"1.2rem\",\n    }),\n  });\n\n  return (\n    <Styled.DesktopNavbar>\n      <Styled.MenuItemsWrapper>\n        <MenuItem name=\"home\" linkTo=\"/\">\n          <HomeLottie name=\"home\" style={{ width: \"2.5rem\" }} />\n        </MenuItem>\n        <MenuItem name=\"apps\" linkTo=\"/apps\">\n          <LayersLottie name=\"apps\" style={{ width: \"2.5rem\" }} />\n        </MenuItem>\n        <MenuItem name=\"code\" linkTo=\"/code\">\n          <CodeLottie name=\"code\" style={{ height: \"4rem\" }} />\n        </MenuItem>\n        <MenuItem name=\"contact\" linkTo=\"/contact\">\n          <ContactLottie name=\"contact\" style={{ width: \"3rem\" }} />\n        </MenuItem>\n      </Styled.MenuItemsWrapper>\n      <Styled.MenuItemsWrapper style={{ gap: \"0\" }}>\n        <Styled.SettingWrapper>\n          <CustomSelect\n            value={{\n              label: t(`lang.${i18next.language}`),\n              value: i18next.language,\n            }}\n            options={langOptions}\n            isSearchable={false}\n            styles={getStyles(\"lang\")}\n            onChange={handleChangeLanguage}\n            hideSelectedOptions={true}\n          />\n        </Styled.SettingWrapper>\n        <Styled.SettingWrapper>\n          <PaletteSelect\n            value={{ label: \"\", value: selectedPallet }}\n            options={colorOptions}\n            isSearchable={false}\n            styles={getStyles()}\n            onChange={(value: any) => setThemePalette(value.value)}\n            // hideSelectedOptions={true}\n          />\n        </Styled.SettingWrapper>\n        <Styled.SettingWrapper onClick={handleToggle}>\n          {themeMode === \"dark\" ? (\n            <SunIcon size={32} color=\"#F8C004\" />\n          ) : (\n            <MoonIcon size={30} />\n          )}\n        </Styled.SettingWrapper>\n      </Styled.MenuItemsWrapper>\n    </Styled.DesktopNavbar>\n  );\n};\n\nexport default DesktopMenu;\n"],"sourceRoot":""}