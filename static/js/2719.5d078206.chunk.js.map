{"version":3,"file":"static/js/2719.5d078206.chunk.js","mappings":"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","sources":["../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === 'root'\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === 'function') {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","defaultFallbackInView","inView","optionsToId","options","Object","keys","sort","filter","key","map","concat","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","_createObserver","id","instance","thresholds","elements","observer","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","InView","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","__publicField","_assertThisInitialized","node","triggerOnce","skip","setState","initialInView","observeNode","children","isPlainChildren","onChange","state","_createClass","value","prevProps","rootMargin","this","delay","_this$props","_unobserveCb","handleChange","_this$state","ref","handleNode","_this$props2","as","_objectWithoutProperties","_excluded","React","_objectSpread","useInView","_ref","_React2$useState","React2","_React2$useState2","_slicedToArray","setRef","_React2$useState3","_React2$useState4","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}