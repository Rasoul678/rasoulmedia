{"version":3,"file":"static/js/Tablet_Menu.19ee1311.chunk.js","mappings":"uaAGA,EAA4BA,OAApBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAMFC,EAAeC,IAAOC,EAAAA,OAAAA,IAAPD,CAAH,gHAGrBH,GAEO,qBAAGK,OAAuB,QAAU,OAIlCC,EAAiBH,IAAOC,EAAAA,OAAAA,IAAPD,CAAH,iKAGvBH,GAGkB,qBAAGO,MAAkBC,cACX,qBAAGD,MAAkBE,KAAKC,mBAG7CC,EAAqBR,IAAAA,OAAH,uSAS3BH,GAOSY,EAAyBT,IAAOC,EAAAA,OAAAA,GAAPD,CAAH,sNAGvBH,EAEAC,GAQCY,EAAiBV,IAAOC,EAAAA,OAAAA,GAAPD,CAAH,oGAOdW,EAAiBX,IAAAA,IAAH,8JAIhB,qBAAGI,MAAkBQ,QAKnBC,EAAiBb,IAAAA,KAAH,2EAKdc,EAAqBd,IAAOC,EAAAA,OAAAA,IAAPD,CAAH,gLAI3BH,GAMSkB,EAAkBf,IAAOC,EAAAA,OAAAA,IAAPD,CAAH,+XAUjB,qBAAGI,MAAkBY,UAWnBC,EAAkBjB,IAAAA,IAAH,gM,2IC5D5B,EAzC8C,SAAC,GAAgB,IAAdkB,EAAa,EAAbA,OACvCN,GAASO,EAAAA,EAAAA,YAATP,KAEFQ,EAAO,SAACC,GAAD,OACX,SAAC,EAAApB,OAAA,MAAD,QACEqB,KAAK,cACLC,YAAY,IACZC,OAAQZ,EACRa,cAAc,SACVJ,KAIR,OACE,SAAC,KAAD,CAA2BK,QAASR,EAApC,UACE,iBAAKS,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAApC,WACE,SAACT,EAAD,CACEU,SAAU,CACRC,OAAQ,CAAEC,EAAG,oBACbC,KAAM,CAAED,EAAG,yBAGf,SAACZ,EAAD,CACEY,EAAE,uBACFF,SAAU,CACRC,OAAQ,CAAEG,QAAS,GACnBD,KAAM,CAAEC,QAAS,IAEnBC,WAAY,CAAEC,SAAU,OAE1B,SAAChB,EAAD,CACEU,SAAU,CACRC,OAAQ,CAAEC,EAAG,0BACbC,KAAM,CAAED,EAAG,gC,UClCjBK,GAAaC,EAAAA,EAAAA,OACjB,kBAAM,mGAGAC,EAAc3C,OAAd2C,UAEFC,EAAU,CACdP,KAAM,eAACL,EAAD,uDAAU,IAAV,MAAoB,CACxBa,SAAS,UAAD,OAAqB,EAATb,EAAa,IAAzB,oBACRO,WAAY,CACVO,KAAM,SACNC,UAAW,GACXC,UAAW,KAGfb,OAAQ,CACNU,SAAS,kBAAD,OAAkC,QAAdF,EAAsB,OAAS,QAAnD,UACRJ,WAAY,CACVO,KAAM,SACNG,MAAO,GACPF,UAAW,IACXG,QAAS,MA2Bf,EApB8C,WAC5C,OAA6BC,EAAAA,EAAAA,WAAS,GAAO,GAA7C,eAAO7C,EAAP,KAAe8C,EAAf,KACMC,GAAeC,EAAAA,EAAAA,QAAO,MACpBtB,EChCmB,SAACuB,GAC5B,IAAMC,GAAaF,EAAAA,EAAAA,QAAO,CAAEvB,MAAO,EAAGC,OAAQ,IAO9C,OALAyB,EAAAA,EAAAA,YAAU,WACRD,EAAWE,QAAQ3B,MAAQwB,EAAIG,QAAQC,YACvCH,EAAWE,QAAQ1B,OAASuB,EAAIG,QAAQE,eACvC,IAEIJ,EAAWE,QDwBCG,CAAcR,GAAzBrB,OAER,OACE,UAAC,KAAD,CACE8B,SAAS,EACTC,QAASzD,EAAS,OAAS,SAC3B0D,OAAQhC,EACRuB,IAAKF,EACL/C,OAAQA,EALV,WAOE,SAAC,KAAD,CAAuB4B,SAAUU,KACjC,SAAC,EAAAqB,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,SAAoC7D,IAAU,SAACmC,EAAD,OAC9C,SAAC,EAAD,CAAYnB,OAAQ,kBAAM8B","sources":["layouts/TabletMenu/TabletMenu.styles.ts","layouts/TabletMenu/MenToggle.tsx","layouts/TabletMenu/index.tsx","layouts/TabletMenu/useDimensions.ts"],"sourcesContent":["import styled from \"styled-components\";\nimport { motion } from \"framer-motion\";\n\nconst { float, revFloat } = window;\n\ninterface TabletNavbarProps {\n  isOpen: boolean;\n}\n\nexport const TabletNavbar = styled(motion.nav)<TabletNavbarProps>`\n  position: fixed;\n  top: 0;\n  ${float}: 0;\n  bottom: 0;\n  width: ${({ isOpen }) => (isOpen ? \"15rem\" : \"0\")};\n  z-index: 2000;\n`;\n\nexport const TabletNavbarBg = styled(motion.div)`\n  position: absolute;\n  top: 0;\n  ${float}: 0;\n  bottom: 0;\n  width: 15rem;\n  background-color: ${({ theme }) => theme.background};\n  box-shadow: 0px 0px 5px 0px ${({ theme }) => theme.card.backgroundColor};\n`;\n\nexport const TabletNavbarButton = styled.button`\n  outline: none;\n  border: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  cursor: pointer;\n  position: absolute;\n  top: 18px;\n  ${float}: 5px;\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  background: transparent;\n`;\n\nexport const TabletMenuItemsWrapper = styled(motion.ul)`\n  margin: 0;\n  padding-top: 1rem;\n  padding-${float}: 2rem;\n  padding-bottom: 1.5rem;\n  padding-${revFloat}: 0;\n\n  position: absolute;\n  top: 4.5rem;\n  width: 100%;\n  height: calc(100% - 5rem);\n`;\n\nexport const TabletMenuItem = styled(motion.li)`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  margin: 0.8rem 1.5rem;\n`;\n\nexport const TabletMenuLink = styled.div`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  color: ${({ theme }) => theme.text};\n  text-decoration: none;\n  text-transform: capitalize;\n`;\n\nexport const TabletMenuText = styled.span`\n  padding: 0.5rem 0.5rem 0;\n  font-size: 1.2rem;\n`;\n\nexport const MenuCellsContainer = styled(motion.div)`\n  width: 100%;\n  position: absolute;\n  bottom: 0rem;\n  ${float}: 0;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  justify-items: center;\n`;\n\nexport const MenuCellWrapper = styled(motion.div)`\n  width: 70%;\n  aspect-ratio: 1;\n  border-radius: 2rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 0.5rem;\n  flex-direction: column;\n  cursor: pointer;\n  color: ${({ theme }) => theme.border};\n\n  @supports (backdrop-filter: blur(10px)) {\n    backdrop-filter: blur(20px);\n  }\n\n  .dark-mode {\n    transform: rotateZ(45deg) !important;\n  }\n`;\n\nexport const LangCellWrapper = styled.div`\n  width: 83%;\n  height: 83%;\n  border-radius: 1rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1rem;\n  font-weight: bold;\n`;\n","import { motion } from \"framer-motion\";\nimport { useTheme } from \"styled-components\";\nimport * as Styled from \"./TabletMenu.styles\";\n\ninterface MenuToggleProps {\n  toggle: () => void;\n}\n\nconst MenuToggle: React.FC<MenuToggleProps> = ({ toggle }) => {\n  const { text } = useTheme();\n\n  const Path = (props: any) => (\n    <motion.path\n      fill=\"transparent\"\n      strokeWidth=\"3\"\n      stroke={text}\n      strokeLinecap=\"round\"\n      {...props}\n    />\n  );\n\n  return (\n    <Styled.TabletNavbarButton onClick={toggle}>\n      <svg width=\"23\" height=\"23\" viewBox=\"0 0 23 23\">\n        <Path\n          variants={{\n            closed: { d: \"M 2 2.5 L 20 2.5\" },\n            open: { d: \"M 3 16.5 L 17 2.5\" },\n          }}\n        />\n        <Path\n          d=\"M 2 9.423 L 20 9.423\"\n          variants={{\n            closed: { opacity: 1 },\n            open: { opacity: 0 },\n          }}\n          transition={{ duration: 0.1 }}\n        />\n        <Path\n          variants={{\n            closed: { d: \"M 2 16.346 L 20 16.346\" },\n            open: { d: \"M 3 2.5 L 17 16.346\" },\n          }}\n        />\n      </svg>\n    </Styled.TabletNavbarButton>\n  );\n};\n\nexport default MenuToggle;\n","import { useRef, lazy, Suspense } from \"react\";\nimport { useCycle } from \"framer-motion\";\nimport { useDimensions } from \"./useDimensions\";\nimport MenuToggle from \"./MenToggle\";\nimport * as Styled from \"./TabletMenu.styles\";\nimport AppLoader from \"components/AppLoader\";\n\nconst Navigation = lazy(\n  () => import(/*webpackChunkName: \"Tablet_Navigation\"*/ \"./Navigation\")\n);\n\nconst { direction } = window;\n\nconst sidebar = {\n  open: (height = 1000) => ({\n    clipPath: `circle(${height * 2 + 200}px at 40px 40px)`,\n    transition: {\n      type: \"spring\",\n      stiffness: 20,\n      restDelta: 2,\n    },\n  }),\n  closed: {\n    clipPath: `circle(20px at ${direction === \"ltr\" ? \"30px\" : \"270px\"} 40px)`,\n    transition: {\n      type: \"spring\",\n      delay: 0.2,\n      stiffness: 400,\n      damping: 40,\n    },\n  },\n};\n\ninterface TabletMenuProps {}\n\nconst TabletMenu: React.FC<TabletMenuProps> = () => {\n  const [isOpen, toggleOpen] = useCycle(false, true);\n  const containerRef = useRef(null);\n  const { height } = useDimensions(containerRef);\n\n  return (\n    <Styled.TabletNavbar\n      initial={false}\n      animate={isOpen ? \"open\" : \"closed\"}\n      custom={height}\n      ref={containerRef}\n      isOpen={isOpen}\n    >\n      <Styled.TabletNavbarBg variants={sidebar} />\n      <Suspense fallback={<AppLoader />}>{isOpen && <Navigation />}</Suspense>\n      <MenuToggle toggle={() => toggleOpen()} />\n    </Styled.TabletNavbar>\n  );\n};\n\nexport default TabletMenu;\n","import { useEffect, useRef } from \"react\";\n\n// Naive implementation - in reality would want to attach\n// a window or resize listener. Also use state/layoutEffect instead of ref/effect\n// if this is important to know on initial client render.\n// It would be safer to  return null for unmeasured states.\nexport const useDimensions = (ref: any) => {\n  const dimensions = useRef({ width: 0, height: 0 });\n\n  useEffect(() => {\n    dimensions.current.width = ref.current.offsetWidth;\n    dimensions.current.height = ref.current.offsetHeight;\n  }, []);\n\n  return dimensions.current;\n};\n"],"names":["window","float","revFloat","TabletNavbar","styled","motion","isOpen","TabletNavbarBg","theme","background","card","backgroundColor","TabletNavbarButton","TabletMenuItemsWrapper","TabletMenuItem","TabletMenuLink","text","TabletMenuText","MenuCellsContainer","MenuCellWrapper","border","LangCellWrapper","toggle","useTheme","Path","props","fill","strokeWidth","stroke","strokeLinecap","onClick","width","height","viewBox","variants","closed","d","open","opacity","transition","duration","Navigation","lazy","direction","sidebar","clipPath","type","stiffness","restDelta","delay","damping","useCycle","toggleOpen","containerRef","useRef","ref","dimensions","useEffect","current","offsetWidth","offsetHeight","useDimensions","initial","animate","custom","Suspense","fallback","AppLoader"],"sourceRoot":""}